// This is your Prisma schema file
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// NextAuth.js Models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  points        Int       @default(0)
  co2Saved      Float     @default(0)
  wasteSaved    Float     @default(0)
  accounts      Account[]
  sessions      Session[]
  activities    Activity[]
  challenges    UserChallenge[]
  badges        UserBadge[]
  posts         ForumPost[]
  comments      ForumComment[]
  eventSignups  EventSignup[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// App-specific Models
model Activity {
  id          String   @id @default(cuid())
  type        String
  points      Int
  co2Impact   Float?
  wasteImpact Float?
  createdAt   DateTime @default(now())
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Challenge {
  id          String   @id @default(cuid())
  title       String
  description String
  points      Int
  duration    Int      // in days
  type        String   // e.g., "daily", "weekly", "monthly"
  createdAt   DateTime @default(now())
  users       UserChallenge[]
}

model UserChallenge {
  id          String    @id @default(cuid())
  userId      String
  challengeId String
  startDate   DateTime  @default(now())
  endDate     DateTime?
  progress    Float     @default(0)
  completed   Boolean   @default(false)
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  challenge   Challenge @relation(fields: [challengeId], references: [id], onDelete: Cascade)
}

model Badge {
  id          String   @id @default(cuid())
  name        String
  description String
  image       String
  criteria    String   // JSON string of requirements
  createdAt   DateTime @default(now())
  users       UserBadge[]
}

model UserBadge {
  id        String   @id @default(cuid())
  userId    String
  badgeId   String
  earnedAt  DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  badge     Badge    @relation(fields: [badgeId], references: [id], onDelete: Cascade)
}

model Event {
  id          String   @id @default(cuid())
  title       String
  description String
  date        DateTime
  location    String
  createdAt   DateTime @default(now())
  attendees   EventSignup[]
}

model EventSignup {
  id        String   @id @default(cuid())
  userId    String
  eventId   String
  signedAt  DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  event     Event    @relation(fields: [eventId], references: [id], onDelete: Cascade)
}

model ForumPost {
  id        String   @id @default(cuid())
  title     String
  content   String
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  comments  ForumComment[]
}

model ForumComment {
  id        String   @id @default(cuid())
  content   String
  userId    String
  postId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  post      ForumPost @relation(fields: [postId], references: [id], onDelete: Cascade)
} 