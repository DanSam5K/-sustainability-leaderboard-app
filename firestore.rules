rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Helper function to check if user is authenticated
    function isAuthenticated() {
      return request.auth != null;
    }
    
    // Helper function to check if user is accessing their own data
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }

    // Users collection
    match /users/{userId} {
      allow read: if isAuthenticated();  // Allow authenticated users to read all user data for leaderboard
      allow create: if isAuthenticated() && request.auth.uid == userId;
      allow update: if isOwner(userId);
      
      // Add specific rule for leaderboard-related fields
      allow read: if isAuthenticated() && (
        request.query.orderBy == 'points' ||
        request.query.orderBy == 'sustainabilityScore'
      );
    }

    // Messages collection
    match /messages/{messageId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated() && request.resource.data.userId == request.auth.uid;
      allow update, delete: if isAuthenticated() && resource.data.userId == request.auth.uid;
      
      // Allow querying messages
      allow read: if isAuthenticated() && (
        request.query.orderBy == 'timestamp' ||
        (request.query.orderBy == 'timestamp' && 
         request.query.where.challengeId != null)
      );
    }

    // Impact metrics collection
    match /impact_metrics/{metricId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated() && request.resource.data.userId == request.auth.uid;
      allow update, delete: if isAuthenticated() && resource.data.userId == request.auth.uid;
      
      // Allow querying by userId
      allow read: if isAuthenticated() && (
        request.query.orderBy == 'date' &&
        request.query.where.userId == request.auth.uid
      );
    }

    // Activities collection
    match /activities/{activityId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated() && request.resource.data.userId == request.auth.uid;
      allow update, delete: if isAuthenticated() && resource.data.userId == request.auth.uid;
    }

    // Challenges collection
    match /challenges/{challengeId} {
      allow read: if isAuthenticated();
      // Only admins can create/update challenges (we'll implement admin roles later)
      allow write: if false;
    }

    // User challenges collection
    match /userChallenges/{challengeId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated() && request.resource.data.userId == request.auth.uid;
      allow update: if isAuthenticated() && resource.data.userId == request.auth.uid;
    }

    // Events collection
    match /events/{eventId} {
      allow read: if isAuthenticated();
      // Only admins can create/update events
      allow write: if false;
    }

    // Forum posts collection
    match /forumPosts/{postId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated() && request.resource.data.userId == request.auth.uid;
      allow update, delete: if isAuthenticated() && resource.data.userId == request.auth.uid;
    }

    // Forum comments collection
    match /forumComments/{commentId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated() && request.resource.data.userId == request.auth.uid;
      allow update, delete: if isAuthenticated() && resource.data.userId == request.auth.uid;
    }
  }
} 